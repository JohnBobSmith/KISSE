KISSE PHYSICS LIBRARY SPECIFICATION
DRAFT 1
If on github, please view using the RAW button
WHAT THIS LIBRARY DOES
This library will take information about a given set of objects, represented as physics objects, and more or less "automagically" update
the physics state of the objects whenever necissary.  The library itself is system-time bound so the number of physics "ticks" per second
doesn't really matter, though it should always be greater than the framerate of the application.  All vectors used in this library are
2d Cartesian vectors.  Homogeneous vectors (vectors represented as {x, y, w} or {x, y, z, w}) must be converted to Cartesian before use in this library.
Velocity MUST be represented as unit vectors (the x and y values must be between 0 and 1) when being used in this library.  If for whatever reason
the velocity is not a unit vector, the x and y values may be normalized using the vnormalize function.

Classes:
	WorldPhysics:
		Contains all physics operations for a given "World"
		Defines physics constants such as gravity and wind speed
		This world also acts as a container for all PhysicsObjects operating in this world, it will
		update the information of each physics object, allowing them to be rendered
	PhysicsObject:
		Contains physics information on a specific object, as well as operators that allow two physics objects to interact in
		a given world.  IMPORTANT TO NOTE: A physics object will store it's own location and data, this data will be updated on 
		every call to WorldPhysics.tick.  A SINGLE INSTANCE OF A PHYSICS OBJECT SHOULD NEVER BE IN TWO WORLDS, this will cause
		undefined behaviour.
Global Functions:
float * vnormalize(float * vec):
	This will take a vector and normalize it (make it into a unit vector), this will take any input and provide an output vector
	pointing in the same direction as the input, with the coordinates scaled down so that they are between 0 and 1.
WorldPhysics members:
	WorldPhysics(float gravity=9.807, float wind[3]={0.0, 0.0, 0.0}, unsigned int topSpeed = 320000):
		This is the constructor for the class WorldPhysics.  Gravity is the gravitational force exerted on an object, represented in meters per second.
		if no value is given for gravity, it is given the default value 9.807.  Wind is the current wind speed, represented as a velocity.  A
		negative wind speed means the wind is blowing to the left of the screen, a positive windspeed means it is blowing to the right.  Finally
		topSpeed is the maximum speed any object can move in this world,represented as meters per second, it can also be thought of as terminal velocity.
	~WorldPhysics():
		This deconstructor safely deletes all data stored by the object and detaches all PhysicsObject members.
		THIS DOES NOT RELEASE MEMORY ALLOCATED TO PHYSICS OBJECTS. If you need to delete physics objects after
		deleting the world you have to do it yourself.
	void setGravity(float gravity=9.807):
		Sets the gravitational force exerted on objects in this world.
	void setWind(float wind[3] = {0.0, 0.0, 0.0}):
		Sets the wind speed in this world
	void setTopSpeed(unsigned int topSpeed=320000):
		Sets the maximum possible speed of objects moving in this world
	byte attachMember(PhysicsObject * member):
		This adds a new physics object to the world, so that data such as collision detection and other such things may be quickly calculated 
		note that this takes pointers to PhysicsObjects, and updates their information on every call to WorldPhysics.tick
		This function will return -1 if attachment failed
	byte detachMember(PhysicsObject * member):
		This prevents the WorldPhysics object from further updating the physics information of a given object so that
		the individual physics object may be used in a different world.
		This function will return -1 if the detachment failed for an unknown reason.
		This function will return -2 if the detachment failed due to the obejct attempting to be detached not existing
	size_t tick():
		This function updates the physics state of all objects in the world, will return 0 if nothing went wrong.
		This will return the pointer to a PhysicsObject if that object failed to be updated, so that the memory
		may be freed/checked appropriately.
	
PhysicsObject members:
	PhysicsObject(float location[2] = {0.0,0.0},int weight = 50, float friction = 1.0, int bouncyness = 10, float initialvelocity[3] = {0.0, 0.0, 0.0}, float 		acceleration = 0.0, float airResistance):
		This is the constuctor for the class PhysicsObject.  location is the location of the PhysicsObject in the "world" when it
		first spawns, all calculations are performed relative to this location.  Weight is the weight of an object represented in
		kilograms.
		If the weight is negative than the object will not move regardless of the force applied to it (static objects.) friction
		is the coefficient of friction of the PhysicsObject.  This effects how rapidly it slows down on a surface and how fast other
		things slow down on it.  It is important to note that 1.0 is a VERY high coefficient of friction (it's the coefficient for rubber)
		refer to the following ASCII chart for the coefficients of different materials.
		|Aluminum	|	0.61
		|Copper		|	0.53
		|Concrete	|	1.0
		|Wood		|	0.62
		|Rubber		|	1.0
		|Wet rubber	|	0.3
		|Glass		|	0.94
		While it is technically possible to have negative coefficients of friction, please don't do this.
		Bouncyness is how bouncy an object is on a 0-100 scale.  Initialvelocity is the velocity, represented as a speed
		and a 2d direction (i.e. float velocity[3] = {speed, x, y}]) that the object is moving in when it is first created.  Please note
		that the object will slow down if it is not accelerating, and if it is accelerating it will still slow down if it's coefficient of
		friction as well as environmental forces overpower the speed at which it is accelerating.  acceleration is the speed, represented in
		meters per second per second, that the physics object gains.  airResistance is the air resistance of the object represented as an
		artificial top speed in meters per second.
	~PhysicsObject():
		This deconstructor safely deletes all data stored by the PhysicsObject.  If it is currently attached to a world it also
		detaches this PhysicsObject from the world before being deleted.
	void setWeight(int weight = 50):
		sets the weight of the PhysicsObject
	void setFriction(float friction = 1.0):
		sets the coefficient of friction for the PhysicsObject.
	void setBounce(int bouncyness = 10):
		sets the bouncyness of the PhysicsObject.
	void setAccelerate(float acceleration = 0.0):
		sets the rate of acceleration of the PhysicsObject.
	void setLocation(float x = 0.0, float y = 0.0):
		This sets the current location of the PhysicsObject. WARNING: this is basically teleportation, so use it sparingly.
	void setAirResistance(float airResistance = 0.0):
		This sets the current air resistance.
	float * getLocation():
		returns the current x and y location of the physics object in a two dimensional array.  The returned array
		is not updated as location changes, and memory (should) be freed between subsiquent calls 
	void getLocation(float * output):
		writes the current location to the supplied array, use this function to write the x and y location to an
		array that has already had memory allocated to it.  Memory does not and should not be freed between
		subsiquent calls
	
